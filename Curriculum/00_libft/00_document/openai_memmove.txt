kekkencs@gmail.com
please write memmove() function in c

Here is an example of a memmove() function in C:

void* memmove(void* dest, const void* src, size_t n) {
  // Create a temporary buffer to hold the data from src
  char temp[n];

  // Copy the data from src to temp
  memcpy(temp, src, n);

  // Copy the data from temp to dest
  memcpy(dest, temp, n);

  // Return a pointer to dest
  return dest;
}

This function takes in three arguments: a pointer to the destination memory location (dest), a pointer to the source memory location (src), and the number of bytes to be moved (n). It uses the memcpy() function to copy the data from src to a temporary buffer, and then uses memcpy() again to copy the data from the temporary buffer to dest. It returns a pointer to the destination memory location.
kekkencs@gmail.com
is there an other version without memcpy()?

Yes, here is an example of a memmove() function that does not use the memcpy() function:

void* memmove(void* dest, const void* src, size_t n) {
  // Cast the pointers to char* so that we can perform
  // arithmetic on them
  char* d = (char*) dest;
  const char* s = (const char*) src;

  // If the source and destination memory locations overlap,
  // we need to copy the data in a non-destructive manner
  if (d < s) {
    // If the destination is lower in memory than the source,
    // we can safely copy the data from the beginning of the
    // source to the beginning of the destination
    for (size_t i = 0; i < n; i++) {
      d[i] = s[i];
    }
  } else {
    // If the destination is higher in memory than the source,
    // we need to copy the data from the end of the source to
    // the end of the destination
    for (size_t i = n; i > 0; i--) {
      d[i-1] = s[i-1];
    }
  }

  // Return a pointer to dest
  return dest;
}

This function works in a similar way to the previous example, but instead of using the memcpy() function to copy the data, it uses a for loop to copy the data one byte at a time. It checks if the source and destination memory locations overlap, and if they do, it copies the data in a non-destructive manner by starting from either the beginning or the end of the source and destination, depending on which memory location is higher in memory.
kekkencs@gmail.com
do you can write an other version of memmove()?

Yes, here is another example of a memmove() function in C:

void* memmove(void* dest, const void* src, size_t n) {
  // Cast the pointers to unsigned char* so that we can perform
  // arithmetic on them
  unsigned char* d = (unsigned char*) dest;
  const unsigned char* s = (const unsigned char*) src;

  // Check if the source and destination memory locations overlap
  if (d < s) {
    // If the destination is lower in memory than the source,
    // we can safely copy the data from the beginning of the
    // source to the beginning of the destination
    while (n--) {
      *d++ = *s++;
    }
  } else {
    // If the destination is higher in memory than the source,
    // we need to copy the data from the end of the source to
    // the end of the destination
    d += n;
    s += n;
    while (n--) {
      *--d = *--s;
    }
  }

  // Return a pointer to dest
  return dest;
}

This function uses a slightly different approach from the previous examples. It uses a while loop to copy the data one byte at a time, and it checks if the source and destination memory locations overlap. If they do, it copies the data in a non-destructive manner by starting from either the beginning or the end of the source and destination, depending on which memory location is higher in memory. It uses the post-increment operator (++) to move the pointers to the next memory location after copying the data.
Free Research Preview: ChatGPT is optimized for dialogue. Our goal is to make AI systems more natural to interact with, and your feedback will help us improve our systems and make them safer.
New Thread
Dark Mode
OpenAI Discord
Updates & FAQ
Log out


